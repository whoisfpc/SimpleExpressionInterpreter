//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expr.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ExpressionInterpreter {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class ExprLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, NUM=2, ID=3, PREVAR=4, ADD=5, SUB=6, MUL=7, DIV=8, LP=9, RP=10, 
		COMMA=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DIGIT", "LETTER", "WS", "NUM", "ID", "PREVAR", "ADD", "SUB", "MUL", "DIV", 
		"LP", "RP", "COMMA"
	};


	public ExprLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExprLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'+'", "'-'", "'*'", "'/'", "'('", "')'", 
		"','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NUM", "ID", "PREVAR", "ADD", "SUB", "MUL", "DIV", "LP", "RP", 
		"COMMA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ExprLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\r', 'Q', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x6', '\x4', '#', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '$', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x6', '\x5', '*', '\n', '\x5', 
		'\r', '\x5', '\xE', '\x5', '+', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', 
		'\x30', '\n', '\x5', '\r', '\x5', '\xE', '\x5', '\x31', '\x5', '\x5', 
		'\x34', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'\x39', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '<', '\v', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x6', '\a', '@', '\n', '\a', '\r', '\a', '\xE', '\a', 
		'\x41', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x2', '\x2', '\xF', '\x3', 
		'\x2', '\x5', '\x2', '\a', '\x3', '\t', '\x4', '\v', '\x5', '\r', '\x6', 
		'\xF', '\a', '\x11', '\b', '\x13', '\t', '\x15', '\n', '\x17', '\v', '\x19', 
		'\f', '\x1B', '\r', '\x3', '\x2', '\x5', '\x3', '\x2', '\x32', ';', '\x4', 
		'\x2', '\x43', '\\', '\x63', '|', '\x5', '\x2', '\v', '\f', '\xF', '\xF', 
		'\"', '\"', '\x2', 'U', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\a', 
		'\"', '\x3', '\x2', '\x2', '\x2', '\t', ')', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\x35', '\x3', '\x2', '\x2', '\x2', '\r', '=', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\x43', '\x3', '\x2', '\x2', '\x2', '\x11', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x13', 'G', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x17', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x19', 'M', '\x3', '\x2', '\x2', '\x2', '\x1B', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\t', '\x2', '\x2', '\x2', '\x1E', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\t', '\x3', '\x2', '\x2', ' ', '\x6', 
		'\x3', '\x2', '\x2', '\x2', '!', '#', '\t', '\x4', '\x2', '\x2', '\"', 
		'!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', 
		'$', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\b', '\x4', '\x2', 
		'\x2', '\'', '\b', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x5', '\x3', 
		'\x2', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', 
		'\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x33', '\x3', '\x2', '\x2', '\x2', '-', '/', '\a', 
		'\x30', '\x2', '\x2', '.', '\x30', '\x5', '\x3', '\x2', '\x2', '/', '.', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x34', '\x3', '\x2', '\x2', '\x2', '\x33', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\n', '\x3', '\x2', '\x2', '\x2', '\x35', ':', '\x5', '\x5', '\x3', 
		'\x2', '\x36', '\x39', '\x5', '\x5', '\x3', '\x2', '\x37', '\x39', '\x5', 
		'\x3', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x39', '<', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', 
		'\x2', '\x2', ';', '\f', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', 
		'\x2', '\x2', '\x2', '=', '?', '\a', '&', '\x2', '\x2', '>', '@', '\x5', 
		'\x3', '\x2', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x44', '\a', '-', '\x2', '\x2', '\x44', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\a', '/', '\x2', '\x2', '\x46', 
		'\x12', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', ',', '\x2', '\x2', 
		'H', '\x14', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', '\x31', '\x2', 
		'\x2', 'J', '\x16', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '*', '\x2', 
		'\x2', 'L', '\x18', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '+', '\x2', 
		'\x2', 'N', '\x1A', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '.', '\x2', 
		'\x2', 'P', '\x1C', '\x3', '\x2', '\x2', '\x2', '\n', '\x2', '$', '+', 
		'\x31', '\x33', '\x38', ':', '\x41', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ExpressionInterpreter
